#include "aradomain.h"
#include <QCloseEvent>
#include <QApplication>

namespace arado
{

AradoMain::AradoMain (QWidget *parent, QApplication *pa)
  :QMainWindow (parent),
   app (0),
   setupDone (false)
{
  app = pa;
  mainUi.setupUi (this);
}

void
AradoMain::Start ()
{
  if (!setupDone) {
    Connect ();
  }
  show ();
}

void
AradoMain::Connect ()
{
  connect (mainUi.actionExit, SIGNAL (triggered()), this, SLOT (Quit ()));
}

void
AradoMain::Quit ()
{
  if (app) {
    app->quit ();
  }
  hide ();
}

void 
AradoMain::closeEvent(QCloseEvent *event)
{
  if (app) {
    app->quit(); 
  }
  if (event) {
    event->accept ();
  }
}

//
// DEFINE THE DATABASE
//



//
// SEARCH TERMS AND BUTTON SEARCH - INPUT PROCESS
//



//
// DO THE KEYWORD SEARCH WITHIN THE URLS DATABASE
//



//
// CREATE A TABLE WITH THE URLS IN EACH LINE 
// BASED ON KEYWORDSEARCH AND GENERATE THE TABLE
//


//
// DISPLAY THE TABLE OF URLS
// HYPERLINK THE URL SO THAT A MOUSE CLICK OR THE
// BUTTON "OPEN URL" OPENS THE URL IN THE BROWSER
// DIPLAY URLS LONGER THAN THE TABLE WITH "..." IN THE MIDDLE,
// SO THAT THE END OF THE URL IS DISPLAYED AND THE BEGINNING OF THE URL
//


//
// TIME DEFINITION
//



//
// ADD URL FROM TXT BOX TO THE DATABAS
// OPEN A POP UP WINDOW AND LET THE USER ADD SOME
// KEYWORDS OR DESCRIPTION OR TITLE FOR THE URL
// WHICH THEN IS AS WELL SEACHABLE AND TRANSFERRED
// CLOSE THE POP UP AND
// ADD A TIME STAMP TO THE URL IN THE TABLE
// NEXT STEP: REDUNDANCY CHECK.
//


//
// REDUNDANCY CHECK FOR ADD URL PROCESS
// HOLD THE URL IN THE PROCESS
// CHECK; IF THE URL IS ALREADY IN THE DATABASE
// IF YES; THEN ADD IT NOT AND DELETE IT
// IF NO; JUST ADD IT TO THE DATABASE.
//


//
// SHOW RECENT URLS BUTTON: GENERATE THE URL TABLE AND CHOOSE 300 URLS
// SORT THEM BY TIME STAMP, MOST FRESH ON TOP
// DIPLAY URLS LONGER THAN THE TABLE WITH "..." IN THE MIDDLE,
// SO THAT THE END OF THE URL IS DISPLAYED AND THE BEGINNING OF THE URL
//


//
// CHECK AT STARTUP, IF THERE IS A NODECACHE.TXT FILE 
// NEXT TO THE EXE, IF NOT, CREATE SUCH A FILE
//


// 
// COUNT THE AMOUNT OF THE NODECACHE
// DEFINE VARIABLE IP CACHE, DEFAULT 1500
// RANGE 1000-5000
//


//
// PROCESS NODECACHE LOAD
// IF THE NUMBER OF THE IP ADRESS IN THE IPCACHE 
// IS SMALLER THAN DEFINED
// THEN ASK EVERY 1 MINUTE ALL CONNECTED PEERS
// TO TRANSFER THE NODE CACHE
// REPEAT THIS AS LONG AS THE AMOUNT OF IP ADRESSES
// IS CONGRUENT WITH THE DEFINED AMOUNT OF NODECACHE
//

//
// LISTEN FOR REMOTE CONNECTED PEERS FOR 
// A REQUEST TO TRANSFER OWN IP-CACHE OF FILE NODECACHE.TXT
//


//
// TRANFER THE NODECACHE.TXT TO THE REQUESTING PEER
//


//
// TRY TO ESTABLISH A CONNECTION
// CHOOSE THE TOP IP OF THE NODECACHE IP LIST AND TRY A CONNECTION


//
// CONNECTION HANDSHAKE TO ESTABLISH A CONNECTION
//


//
// CONNECTION MONITOR
// 30 PEERS DOWNLOAD CONNECTION
// 30 PEERS UPLOAD CONNECTION
//


//
// USE THE TIMER TO COUNT THE DURATION OF THE 
// CONNECTION OF THE REMOTE IP
// DEFINE A TIMESTAMP; HOW LONG THE CONNECTION IS ESTABLISHED
// USE THE DROP-IP-DEFINITION TO CANCEL THE CONNECTION
// AS DEFINED THERE.
//


//
// IF A PEER DOES NOT RESPOND 
// AFTER A CONNECTION; CHOOSE ANOTHER ONE, E.G. NEXT IP IN THE LIST 
// TO CONNECT TO THE NEXT IP
// ADD THE NOT RESPONDING IP TO THE END OF THE IP LIST.
//



//
// GENERAL: IF AND IP IS NOT RESPONDING; CHOOSE THE NEXT ONE
// AND MOVE THE IP FROM THE TOP POSITION TO THE END OF THE LIST.
//


//
// BOOTSTRAP PROCESS
// BOOT BUTTON ADDS IP AND PORT ON TOP OF THE IP LIST
// IN THE NODECACHE:TXT
// TRY TO ESTABLISH A CONNECTION
// IF CONNECTION IS SUCCESSFUL; TRY TO CALL THE REMOTE NODESLIST
// ADD IP ADRESSES TO THE OWN NODECACHE.TXT 
// AND TRY AGAIN TO ESTABLISH 30+30 CONNECTIONS
// REPEAT THE NODECACHE.TXT TRANSFER EACH MINUTE TO EACH CONNECTED PEER
// UNTIL THE OWN NODECACHE HAS THE DEFINE NUMBER/AMOUNT OF IP ADRESSES LISTED
//

//
// IP CACHE REDUNDNACY CLEANUP
// IF ANY IP ADDED TO THE NODECACHE IS ALREADY THERE
// DO NOT ADD IT; BECAUSE IT IS ALREADY THERE AND REDUNDANT
//


//
// URL TRANSFER UPLOAD
// START A UPLOAD PROCESS FOR EACH PEER WITH UPLOAD URLS
// DEFINE THE ENTRY POINT (TIMESTAMP / LIST-ITEM) TO START 
// TO TRANFER THE FRESHEST TO OLDEST URL TO PEER
// FOR EACH PEER CONNECTED
// TRANSFER THE URLS FROM FRESHEST TO OLDEST; 
// CONSIDER THE TIME-DELAY BETWEEN EACH TRANSFER
// DROP THE CONNCECTION IF DROP-MINUTES ARE OVER
// MOVE THE DROPPED IP TO THE BOTTUM OF THE IP-LIST IN THE NODECACHE
//


//
// URL TRANSFER DOWNLOAD
// START A DOWNLOAD PROCESS FOR EACH PEER WITH TO BE DOWNLOADED URLS
// ASK THE REMOTE PEER TO HANDLE YOU AS A PEER FOR UPLOADS
// IF THE REMOTE PEER SENDS AN OK; THAT YOU ARE IN HIS UPLOAD CONNECTION
// THE TRANSFER STARTS
// MAKE A REDUNDANCY CHECK; IF THE TRANSFERED URL IS IN YOUR LOCAL DATABASE ALREADY
// ADD THE URL TO YOUR DATABASE; IF NOT REDUNDANT WITH A NEW TIME STAMP
// OF THE INCOMING DATE
//


//
// DEFINE THE PORT OF THE APPLICATION
//


//
// DISPLAY NUMBER OF CONNECTION IN THE BOTTUM 
// (OR STATUS BAR)
// DISPLAY "NOT CONNECTED" IF NO CONNECTION IS THERE
// OTHERWISE "CONNECTIONS (in/out): 30/30"
//


//
// ALLOW DYNDNS IN THE NODECHACHE.TXT
// IF THERE IS ANY HTTP://CONNECTME.DYNDNS.ORG
// URL IN THE NODESCACHE; THEN USE THE HTTP-STRING TO CONNECT TO THE IP
// HANDLE THE STRING IN THE SAME WAY IP ADRESSES ARE HANDLED
// E.G. TO MOVE THE STRING INTO THE BOTTUM OF THE LIST
// IF THE NODE GOES OFFLINE OR IS DROPPED BY THIS NODE.
// USERS THEN CAN ADD MANUALLY A DYNDNS HTTP IP STRING INTO TO THE NODECACHE.TXT
//



//
// ABOUT MESSAGE WINDOW
//




} // namespace






